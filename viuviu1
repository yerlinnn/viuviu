#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>

int main() {
    int *array;  /* Указатель на разделяемую память */
    int shmid;   /* IPC дескриптор для области разделяемой памяти */
    int new = 1;  /* Флаг необходимости инициализации элементов массива */
    char pathname[] = "prog1.c";  /* Имя файла, использующееся для генерации ключа */

    key_t key;   /* IPC ключ */
    if ((key = ftok(pathname, 0)) < 0) {
        printf("Can't generate key\n");
        exit(-1);
    }

    /* Пытаемся эксклюзивно создать разделяемую память для сгенерированного ключа */
    if ((shmid = shmget(key, 3 * sizeof(int), 0666 | IPC_CREAT | IPC_EXCL)) < 0) {
        /* В случае ошибки пытаемся определить ее причину */
        if (errno != EEXIST) {
            printf("Can't create shared memory\n");
            exit(-1);
        } else {
            /* Если разделяемая память уже существует, пытаемся получить ее IPC дескриптор */
            if ((shmid = shmget(key, 3 * sizeof(int), 0)) < 0) {
                printf("Can't find shared memory\n");
                exit(-1);
            }
            new = 0;  /* Сбрасываем флаг инициализации */
        }
    }

    /* Пытаемся отобразить разделяемую память в адресное пространство текущего процесса */
    if ((array = (int *)shmat(shmid, NULL, 0)) == (int *)(-1)) {
        printf("Can't attach shared memory\n");
        exit(-1);
    }

    /* В зависимости от значения флага new либо инициализируем массив, либо увеличиваем соответствующие счетчики */
    if (new) {
        array[0] = 1;
        array[1] = 0;
        array[2] = 1;
    } else {
        array[0] += 1;
        array[2] += 1;
    }

    /* Печатаем новые значения счетчиков, отсоединяем разделяемую память и завершаем работу */
    printf("Program 1 was spawn %d times, program 2 - %d times, total - %d times\n", array[0], array[1], array[2]);

    if (shmdt(array) < 0) {
        printf("Can't detach shared memory\n");
        exit(-1);
    }

    return 0;
}
